// Get the value corresponding to a certain key in a std::map
// C++11

#include <map>
#include <string>

int main()
{
  std::map<string, int> m = { {"a", 1}, {"b", 2}, {"c", 3} };
  
  auto it = m.find("b");
  if (it != end(m))
  {
     int value = it->second;
     // ... do something with value
  }
  
  // alternative: throws if "b" is not in m
  int value = m.at("b");
  
  // alternative: default-constructs value if "b" is not in m
  int value = m["b"];
}

// Find the value corresponding to a certain key in a std::map.
// 
// On [8], we create a [`std::map`](cpp/container/map)
// and initialise it with key-value pairs.
// 
// On [10], we get the iterator corresponding to the key "b", if any, 
// by using [`find`](cpp/container/map/find) member function which 
// finds an element with key equivalent to the given key ("b").
// If such element is found, an Iterator to the element with key 
// equivalent to "b" is returned, otherwise the [`past-the-end`](cpp/container/map/end) 
// iterator is returned.
// 
// On [11], we check if find has returned a valid element. If so,
// it is not equal to the past-the-end iterator.
// 
// On [13] we get the value corresponding to key "b".
// Note that here a common anti-pattern it's often used, that is retrieving the
// value by using m[key]. This will result in another lookup, causing
// performance penalty.
//
// On [19] an alternative: by using [`at`](cpp/container/map/at) we get 
// a reference to the mapped value of the element with key equivalent to "b". 
// If no such element exists, an exception of type std::out_of_range is thrown.
// 
// On [22] another alternative: by using [`operator[]`](cpp/container/map/operator_at)
// we get a reference to the value that is mapped to a key equivalent to "b", 
// performing an insertion if such key does not already exist.
//
// Note: in C++14 it's possible to do even better, without constructing an instance of the
// searched key. See [`find`](cpp/container/map/find) for more details.
